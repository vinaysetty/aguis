/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.ag.Assignment', null, global);
goog.exportSymbol('proto.ag.Assignments', null, global);
goog.exportSymbol('proto.ag.Course', null, global);
goog.exportSymbol('proto.ag.Courses', null, global);
goog.exportSymbol('proto.ag.Enrollment', null, global);
goog.exportSymbol('proto.ag.Enrollment.Status', null, global);
goog.exportSymbol('proto.ag.EnrollmentRequest', null, global);
goog.exportSymbol('proto.ag.EnrollmentResponse', null, global);
goog.exportSymbol('proto.ag.Group', null, global);
goog.exportSymbol('proto.ag.RecordRequest', null, global);
goog.exportSymbol('proto.ag.RecordWithStatusRequest', null, global);
goog.exportSymbol('proto.ag.RemoteIdentity', null, global);
goog.exportSymbol('proto.ag.StatusCode', null, global);
goog.exportSymbol('proto.ag.Submission', null, global);
goog.exportSymbol('proto.ag.User', null, global);
goog.exportSymbol('proto.ag.Users', null, global);
goog.exportSymbol('proto.ag.Void', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ag.User.repeatedFields_, null);
};
goog.inherits(proto.ag.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.User.displayName = 'proto.ag.User';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ag.User.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.User.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    isadmin: jspb.Message.getFieldWithDefault(msg, 2, false),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    studentid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    email: jspb.Message.getFieldWithDefault(msg, 5, ""),
    avatarurl: jspb.Message.getFieldWithDefault(msg, 6, ""),
    remoteidentitiesList: jspb.Message.toObjectList(msg.getRemoteidentitiesList(),
    proto.ag.RemoteIdentity.toObject, includeInstance),
    enrollmentsList: jspb.Message.toObjectList(msg.getEnrollmentsList(),
    proto.ag.Enrollment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.User}
 */
proto.ag.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.User;
  return proto.ag.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.User}
 */
proto.ag.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsadmin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStudentid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarurl(value);
      break;
    case 7:
      var value = new proto.ag.RemoteIdentity;
      reader.readMessage(value,proto.ag.RemoteIdentity.deserializeBinaryFromReader);
      msg.addRemoteidentities(value);
      break;
    case 8:
      var value = new proto.ag.Enrollment;
      reader.readMessage(value,proto.ag.Enrollment.deserializeBinaryFromReader);
      msg.addEnrollments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getIsadmin();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStudentid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAvatarurl();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRemoteidentitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.ag.RemoteIdentity.serializeBinaryToWriter
    );
  }
  f = message.getEnrollmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.ag.Enrollment.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.ag.User.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ag.User.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool isAdmin = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ag.User.prototype.getIsadmin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.ag.User.prototype.setIsadmin = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.ag.User.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ag.User.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string studentID = 4;
 * @return {string}
 */
proto.ag.User.prototype.getStudentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ag.User.prototype.setStudentid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string email = 5;
 * @return {string}
 */
proto.ag.User.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ag.User.prototype.setEmail = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string avatarURL = 6;
 * @return {string}
 */
proto.ag.User.prototype.getAvatarurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ag.User.prototype.setAvatarurl = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * repeated RemoteIdentity remoteIdentities = 7;
 * @return {!Array.<!proto.ag.RemoteIdentity>}
 */
proto.ag.User.prototype.getRemoteidentitiesList = function() {
  return /** @type{!Array.<!proto.ag.RemoteIdentity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ag.RemoteIdentity, 7));
};


/** @param {!Array.<!proto.ag.RemoteIdentity>} value */
proto.ag.User.prototype.setRemoteidentitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.ag.RemoteIdentity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ag.RemoteIdentity}
 */
proto.ag.User.prototype.addRemoteidentities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.ag.RemoteIdentity, opt_index);
};


proto.ag.User.prototype.clearRemoteidentitiesList = function() {
  this.setRemoteidentitiesList([]);
};


/**
 * repeated Enrollment enrollments = 8;
 * @return {!Array.<!proto.ag.Enrollment>}
 */
proto.ag.User.prototype.getEnrollmentsList = function() {
  return /** @type{!Array.<!proto.ag.Enrollment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ag.Enrollment, 8));
};


/** @param {!Array.<!proto.ag.Enrollment>} value */
proto.ag.User.prototype.setEnrollmentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.ag.Enrollment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ag.Enrollment}
 */
proto.ag.User.prototype.addEnrollments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.ag.Enrollment, opt_index);
};


proto.ag.User.prototype.clearEnrollmentsList = function() {
  this.setEnrollmentsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.RemoteIdentity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ag.RemoteIdentity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.RemoteIdentity.displayName = 'proto.ag.RemoteIdentity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.RemoteIdentity.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.RemoteIdentity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.RemoteIdentity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.RemoteIdentity.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    provider: jspb.Message.getFieldWithDefault(msg, 2, ""),
    remoteid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    accesstoken: jspb.Message.getFieldWithDefault(msg, 4, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.RemoteIdentity}
 */
proto.ag.RemoteIdentity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.RemoteIdentity;
  return proto.ag.RemoteIdentity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.RemoteIdentity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.RemoteIdentity}
 */
proto.ag.RemoteIdentity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRemoteid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.RemoteIdentity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.RemoteIdentity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.RemoteIdentity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.RemoteIdentity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRemoteid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.ag.RemoteIdentity.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ag.RemoteIdentity.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string provider = 2;
 * @return {string}
 */
proto.ag.RemoteIdentity.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ag.RemoteIdentity.prototype.setProvider = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 remoteID = 3;
 * @return {number}
 */
proto.ag.RemoteIdentity.prototype.getRemoteid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ag.RemoteIdentity.prototype.setRemoteid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string accessToken = 4;
 * @return {string}
 */
proto.ag.RemoteIdentity.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ag.RemoteIdentity.prototype.setAccesstoken = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint64 userID = 5;
 * @return {number}
 */
proto.ag.RemoteIdentity.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ag.RemoteIdentity.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.Users = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ag.Users.repeatedFields_, null);
};
goog.inherits(proto.ag.Users, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.Users.displayName = 'proto.ag.Users';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ag.Users.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.Users.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.Users.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.Users} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Users.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.ag.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.Users}
 */
proto.ag.Users.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.Users;
  return proto.ag.Users.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.Users} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.Users}
 */
proto.ag.Users.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ag.User;
      reader.readMessage(value,proto.ag.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.Users.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.Users.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.Users} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Users.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ag.User.serializeBinaryToWriter
    );
  }
};


/**
 * repeated User Users = 1;
 * @return {!Array.<!proto.ag.User>}
 */
proto.ag.Users.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.ag.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ag.User, 1));
};


/** @param {!Array.<!proto.ag.User>} value */
proto.ag.Users.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ag.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ag.User}
 */
proto.ag.Users.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ag.User, opt_index);
};


proto.ag.Users.prototype.clearUsersList = function() {
  this.setUsersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.Void = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ag.Void, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.Void.displayName = 'proto.ag.Void';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.Void.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.Void.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.Void} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Void.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.Void}
 */
proto.ag.Void.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.Void;
  return proto.ag.Void.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.Void} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.Void}
 */
proto.ag.Void.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.Void.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.Void.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.Void} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Void.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.RecordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ag.RecordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.RecordRequest.displayName = 'proto.ag.RecordRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.RecordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.RecordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.RecordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.RecordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.RecordRequest}
 */
proto.ag.RecordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.RecordRequest;
  return proto.ag.RecordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.RecordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.RecordRequest}
 */
proto.ag.RecordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.RecordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.RecordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.RecordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.RecordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.ag.RecordRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ag.RecordRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.Assignment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ag.Assignment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.Assignment.displayName = 'proto.ag.Assignment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.Assignment.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.Assignment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.Assignment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Assignment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    courseid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    language: jspb.Message.getFieldWithDefault(msg, 4, ""),
    deadline: (f = msg.getDeadline()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    autoapprove: jspb.Message.getFieldWithDefault(msg, 6, false),
    order: jspb.Message.getFieldWithDefault(msg, 7, 0),
    submission: (f = msg.getSubmission()) && proto.ag.Submission.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.Assignment}
 */
proto.ag.Assignment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.Assignment;
  return proto.ag.Assignment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.Assignment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.Assignment}
 */
proto.ag.Assignment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCourseid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDeadline(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAutoapprove(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOrder(value);
      break;
    case 8:
      var value = new proto.ag.Submission;
      reader.readMessage(value,proto.ag.Submission.deserializeBinaryFromReader);
      msg.setSubmission(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.Assignment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.Assignment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.Assignment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Assignment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCourseid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDeadline();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAutoapprove();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getOrder();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getSubmission();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ag.Submission.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.ag.Assignment.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ag.Assignment.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 courseID = 2;
 * @return {number}
 */
proto.ag.Assignment.prototype.getCourseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ag.Assignment.prototype.setCourseid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.ag.Assignment.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ag.Assignment.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string language = 4;
 * @return {string}
 */
proto.ag.Assignment.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.ag.Assignment.prototype.setLanguage = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp deadline = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ag.Assignment.prototype.getDeadline = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.ag.Assignment.prototype.setDeadline = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.ag.Assignment.prototype.clearDeadline = function() {
  this.setDeadline(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ag.Assignment.prototype.hasDeadline = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool autoApprove = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ag.Assignment.prototype.getAutoapprove = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.ag.Assignment.prototype.setAutoapprove = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 order = 7;
 * @return {number}
 */
proto.ag.Assignment.prototype.getOrder = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ag.Assignment.prototype.setOrder = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional Submission submission = 8;
 * @return {?proto.ag.Submission}
 */
proto.ag.Assignment.prototype.getSubmission = function() {
  return /** @type{?proto.ag.Submission} */ (
    jspb.Message.getWrapperField(this, proto.ag.Submission, 8));
};


/** @param {?proto.ag.Submission|undefined} value */
proto.ag.Assignment.prototype.setSubmission = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.ag.Assignment.prototype.clearSubmission = function() {
  this.setSubmission(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ag.Assignment.prototype.hasSubmission = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.Submission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ag.Submission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.Submission.displayName = 'proto.ag.Submission';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.Submission.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.Submission.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.Submission} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Submission.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    assignmentid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    score: jspb.Message.getFieldWithDefault(msg, 5, 0),
    scoreobjects: jspb.Message.getFieldWithDefault(msg, 6, ""),
    buildinfo: jspb.Message.getFieldWithDefault(msg, 7, ""),
    commithash: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.Submission}
 */
proto.ag.Submission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.Submission;
  return proto.ag.Submission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.Submission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.Submission}
 */
proto.ag.Submission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAssignmentid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGroupid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScore(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setScoreobjects(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuildinfo(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommithash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.Submission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.Submission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.Submission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Submission.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getAssignmentid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getGroupid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getScoreobjects();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getBuildinfo();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getCommithash();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.ag.Submission.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ag.Submission.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 assignmentID = 2;
 * @return {number}
 */
proto.ag.Submission.prototype.getAssignmentid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ag.Submission.prototype.setAssignmentid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 userID = 3;
 * @return {number}
 */
proto.ag.Submission.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ag.Submission.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 groupID = 4;
 * @return {number}
 */
proto.ag.Submission.prototype.getGroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ag.Submission.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 score = 5;
 * @return {number}
 */
proto.ag.Submission.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.ag.Submission.prototype.setScore = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string scoreobjects = 6;
 * @return {string}
 */
proto.ag.Submission.prototype.getScoreobjects = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ag.Submission.prototype.setScoreobjects = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string buildinfo = 7;
 * @return {string}
 */
proto.ag.Submission.prototype.getBuildinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.ag.Submission.prototype.setBuildinfo = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string commithash = 8;
 * @return {string}
 */
proto.ag.Submission.prototype.getCommithash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.ag.Submission.prototype.setCommithash = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.Assignments = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ag.Assignments.repeatedFields_, null);
};
goog.inherits(proto.ag.Assignments, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.Assignments.displayName = 'proto.ag.Assignments';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ag.Assignments.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.Assignments.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.Assignments.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.Assignments} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Assignments.toObject = function(includeInstance, msg) {
  var f, obj = {
    assignmentsList: jspb.Message.toObjectList(msg.getAssignmentsList(),
    proto.ag.Assignment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.Assignments}
 */
proto.ag.Assignments.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.Assignments;
  return proto.ag.Assignments.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.Assignments} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.Assignments}
 */
proto.ag.Assignments.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ag.Assignment;
      reader.readMessage(value,proto.ag.Assignment.deserializeBinaryFromReader);
      msg.addAssignments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.Assignments.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.Assignments.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.Assignments} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Assignments.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssignmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ag.Assignment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Assignment assignments = 1;
 * @return {!Array.<!proto.ag.Assignment>}
 */
proto.ag.Assignments.prototype.getAssignmentsList = function() {
  return /** @type{!Array.<!proto.ag.Assignment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ag.Assignment, 1));
};


/** @param {!Array.<!proto.ag.Assignment>} value */
proto.ag.Assignments.prototype.setAssignmentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ag.Assignment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ag.Assignment}
 */
proto.ag.Assignments.prototype.addAssignments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ag.Assignment, opt_index);
};


proto.ag.Assignments.prototype.clearAssignmentsList = function() {
  this.setAssignmentsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.Group = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ag.Group.repeatedFields_, null);
};
goog.inherits(proto.ag.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.Group.displayName = 'proto.ag.Group';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ag.Group.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.Group.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.Group.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.Group} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Group.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    status: jspb.Message.getFieldWithDefault(msg, 3, 0),
    courseid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.ag.User.toObject, includeInstance),
    enrollmentsList: jspb.Message.toObjectList(msg.getEnrollmentsList(),
    proto.ag.Enrollment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.Group}
 */
proto.ag.Group.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.Group;
  return proto.ag.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.Group}
 */
proto.ag.Group.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCourseid(value);
      break;
    case 5:
      var value = new proto.ag.User;
      reader.readMessage(value,proto.ag.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 6:
      var value = new proto.ag.Enrollment;
      reader.readMessage(value,proto.ag.Enrollment.deserializeBinaryFromReader);
      msg.addEnrollments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.Group.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Group.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCourseid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ag.User.serializeBinaryToWriter
    );
  }
  f = message.getEnrollmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.ag.Enrollment.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.ag.Group.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ag.Group.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ag.Group.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ag.Group.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 status = 3;
 * @return {number}
 */
proto.ag.Group.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ag.Group.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 CourseID = 4;
 * @return {number}
 */
proto.ag.Group.prototype.getCourseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ag.Group.prototype.setCourseid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated User Users = 5;
 * @return {!Array.<!proto.ag.User>}
 */
proto.ag.Group.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.ag.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ag.User, 5));
};


/** @param {!Array.<!proto.ag.User>} value */
proto.ag.Group.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ag.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ag.User}
 */
proto.ag.Group.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ag.User, opt_index);
};


proto.ag.Group.prototype.clearUsersList = function() {
  this.setUsersList([]);
};


/**
 * repeated Enrollment Enrollments = 6;
 * @return {!Array.<!proto.ag.Enrollment>}
 */
proto.ag.Group.prototype.getEnrollmentsList = function() {
  return /** @type{!Array.<!proto.ag.Enrollment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ag.Enrollment, 6));
};


/** @param {!Array.<!proto.ag.Enrollment>} value */
proto.ag.Group.prototype.setEnrollmentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ag.Enrollment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ag.Enrollment}
 */
proto.ag.Group.prototype.addEnrollments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ag.Enrollment, opt_index);
};


proto.ag.Group.prototype.clearEnrollmentsList = function() {
  this.setEnrollmentsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.Course = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ag.Course.repeatedFields_, null);
};
goog.inherits(proto.ag.Course, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.Course.displayName = 'proto.ag.Course';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ag.Course.repeatedFields_ = [9,10,11];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.Course.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.Course.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.Course} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Course.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    code: jspb.Message.getFieldWithDefault(msg, 3, ""),
    year: jspb.Message.getFieldWithDefault(msg, 4, 0),
    tag: jspb.Message.getFieldWithDefault(msg, 5, ""),
    provider: jspb.Message.getFieldWithDefault(msg, 6, ""),
    directoryid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    enrolled: jspb.Message.getFieldWithDefault(msg, 8, 0),
    enrollmentsList: jspb.Message.toObjectList(msg.getEnrollmentsList(),
    proto.ag.Enrollment.toObject, includeInstance),
    assignmentsList: jspb.Message.toObjectList(msg.getAssignmentsList(),
    proto.ag.Assignment.toObject, includeInstance),
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.ag.Group.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.Course}
 */
proto.ag.Course.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.Course;
  return proto.ag.Course.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.Course} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.Course}
 */
proto.ag.Course.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setYear(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDirectoryid(value);
      break;
    case 8:
      var value = /** @type {!proto.ag.Enrollment.Status} */ (reader.readEnum());
      msg.setEnrolled(value);
      break;
    case 9:
      var value = new proto.ag.Enrollment;
      reader.readMessage(value,proto.ag.Enrollment.deserializeBinaryFromReader);
      msg.addEnrollments(value);
      break;
    case 10:
      var value = new proto.ag.Assignment;
      reader.readMessage(value,proto.ag.Assignment.deserializeBinaryFromReader);
      msg.addAssignments(value);
      break;
    case 11:
      var value = new proto.ag.Group;
      reader.readMessage(value,proto.ag.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.Course.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.Course.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.Course} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Course.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDirectoryid();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getEnrolled();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getEnrollmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.ag.Enrollment.serializeBinaryToWriter
    );
  }
  f = message.getAssignmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.ag.Assignment.serializeBinaryToWriter
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.ag.Group.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.ag.Course.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ag.Course.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ag.Course.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.ag.Course.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string code = 3;
 * @return {string}
 */
proto.ag.Course.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.ag.Course.prototype.setCode = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 year = 4;
 * @return {number}
 */
proto.ag.Course.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ag.Course.prototype.setYear = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string tag = 5;
 * @return {string}
 */
proto.ag.Course.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.ag.Course.prototype.setTag = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string provider = 6;
 * @return {string}
 */
proto.ag.Course.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.ag.Course.prototype.setProvider = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint64 directoryID = 7;
 * @return {number}
 */
proto.ag.Course.prototype.getDirectoryid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.ag.Course.prototype.setDirectoryid = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional Enrollment.Status enrolled = 8;
 * @return {!proto.ag.Enrollment.Status}
 */
proto.ag.Course.prototype.getEnrolled = function() {
  return /** @type {!proto.ag.Enrollment.Status} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.ag.Enrollment.Status} value */
proto.ag.Course.prototype.setEnrolled = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * repeated Enrollment enrollments = 9;
 * @return {!Array.<!proto.ag.Enrollment>}
 */
proto.ag.Course.prototype.getEnrollmentsList = function() {
  return /** @type{!Array.<!proto.ag.Enrollment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ag.Enrollment, 9));
};


/** @param {!Array.<!proto.ag.Enrollment>} value */
proto.ag.Course.prototype.setEnrollmentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.ag.Enrollment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ag.Enrollment}
 */
proto.ag.Course.prototype.addEnrollments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.ag.Enrollment, opt_index);
};


proto.ag.Course.prototype.clearEnrollmentsList = function() {
  this.setEnrollmentsList([]);
};


/**
 * repeated Assignment assignments = 10;
 * @return {!Array.<!proto.ag.Assignment>}
 */
proto.ag.Course.prototype.getAssignmentsList = function() {
  return /** @type{!Array.<!proto.ag.Assignment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ag.Assignment, 10));
};


/** @param {!Array.<!proto.ag.Assignment>} value */
proto.ag.Course.prototype.setAssignmentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.ag.Assignment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ag.Assignment}
 */
proto.ag.Course.prototype.addAssignments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.ag.Assignment, opt_index);
};


proto.ag.Course.prototype.clearAssignmentsList = function() {
  this.setAssignmentsList([]);
};


/**
 * repeated Group groups = 11;
 * @return {!Array.<!proto.ag.Group>}
 */
proto.ag.Course.prototype.getGroupsList = function() {
  return /** @type{!Array.<!proto.ag.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ag.Group, 11));
};


/** @param {!Array.<!proto.ag.Group>} value */
proto.ag.Course.prototype.setGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.ag.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ag.Group}
 */
proto.ag.Course.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.ag.Group, opt_index);
};


proto.ag.Course.prototype.clearGroupsList = function() {
  this.setGroupsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.Courses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ag.Courses.repeatedFields_, null);
};
goog.inherits(proto.ag.Courses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.Courses.displayName = 'proto.ag.Courses';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ag.Courses.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.Courses.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.Courses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.Courses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Courses.toObject = function(includeInstance, msg) {
  var f, obj = {
    coursesList: jspb.Message.toObjectList(msg.getCoursesList(),
    proto.ag.Course.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.Courses}
 */
proto.ag.Courses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.Courses;
  return proto.ag.Courses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.Courses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.Courses}
 */
proto.ag.Courses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ag.Course;
      reader.readMessage(value,proto.ag.Course.deserializeBinaryFromReader);
      msg.addCourses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.Courses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.Courses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.Courses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Courses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoursesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ag.Course.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Course Courses = 1;
 * @return {!Array.<!proto.ag.Course>}
 */
proto.ag.Courses.prototype.getCoursesList = function() {
  return /** @type{!Array.<!proto.ag.Course>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ag.Course, 1));
};


/** @param {!Array.<!proto.ag.Course>} value */
proto.ag.Courses.prototype.setCoursesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ag.Course=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ag.Course}
 */
proto.ag.Courses.prototype.addCourses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ag.Course, opt_index);
};


proto.ag.Courses.prototype.clearCoursesList = function() {
  this.setCoursesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.Enrollment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ag.Enrollment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.Enrollment.displayName = 'proto.ag.Enrollment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.Enrollment.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.Enrollment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.Enrollment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Enrollment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    courseid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    groupid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    user: (f = msg.getUser()) && proto.ag.User.toObject(includeInstance, f),
    course: (f = msg.getCourse()) && proto.ag.Course.toObject(includeInstance, f),
    group: (f = msg.getGroup()) && proto.ag.Group.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.Enrollment}
 */
proto.ag.Enrollment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.Enrollment;
  return proto.ag.Enrollment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.Enrollment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.Enrollment}
 */
proto.ag.Enrollment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCourseid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGroupid(value);
      break;
    case 5:
      var value = new proto.ag.User;
      reader.readMessage(value,proto.ag.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 6:
      var value = new proto.ag.Course;
      reader.readMessage(value,proto.ag.Course.deserializeBinaryFromReader);
      msg.setCourse(value);
      break;
    case 7:
      var value = new proto.ag.Group;
      reader.readMessage(value,proto.ag.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 8:
      var value = /** @type {!proto.ag.Enrollment.Status} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.Enrollment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.Enrollment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.Enrollment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.Enrollment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCourseid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getGroupid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ag.User.serializeBinaryToWriter
    );
  }
  f = message.getCourse();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ag.Course.serializeBinaryToWriter
    );
  }
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ag.Group.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.ag.Enrollment.Status = {
  NONE: 0,
  PENDING: 1,
  REJECTED: 2,
  STUDENT: 3,
  TEACHER: 4
};

/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.ag.Enrollment.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ag.Enrollment.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 courseID = 2;
 * @return {number}
 */
proto.ag.Enrollment.prototype.getCourseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ag.Enrollment.prototype.setCourseid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint64 userID = 3;
 * @return {number}
 */
proto.ag.Enrollment.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.ag.Enrollment.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint64 groupID = 4;
 * @return {number}
 */
proto.ag.Enrollment.prototype.getGroupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ag.Enrollment.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional User user = 5;
 * @return {?proto.ag.User}
 */
proto.ag.Enrollment.prototype.getUser = function() {
  return /** @type{?proto.ag.User} */ (
    jspb.Message.getWrapperField(this, proto.ag.User, 5));
};


/** @param {?proto.ag.User|undefined} value */
proto.ag.Enrollment.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.ag.Enrollment.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ag.Enrollment.prototype.hasUser = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional Course course = 6;
 * @return {?proto.ag.Course}
 */
proto.ag.Enrollment.prototype.getCourse = function() {
  return /** @type{?proto.ag.Course} */ (
    jspb.Message.getWrapperField(this, proto.ag.Course, 6));
};


/** @param {?proto.ag.Course|undefined} value */
proto.ag.Enrollment.prototype.setCourse = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.ag.Enrollment.prototype.clearCourse = function() {
  this.setCourse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ag.Enrollment.prototype.hasCourse = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Group group = 7;
 * @return {?proto.ag.Group}
 */
proto.ag.Enrollment.prototype.getGroup = function() {
  return /** @type{?proto.ag.Group} */ (
    jspb.Message.getWrapperField(this, proto.ag.Group, 7));
};


/** @param {?proto.ag.Group|undefined} value */
proto.ag.Enrollment.prototype.setGroup = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.ag.Enrollment.prototype.clearGroup = function() {
  this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ag.Enrollment.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Status status = 8;
 * @return {!proto.ag.Enrollment.Status}
 */
proto.ag.Enrollment.prototype.getStatus = function() {
  return /** @type {!proto.ag.Enrollment.Status} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {!proto.ag.Enrollment.Status} value */
proto.ag.Enrollment.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.EnrollmentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ag.EnrollmentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.EnrollmentRequest.displayName = 'proto.ag.EnrollmentRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.EnrollmentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.EnrollmentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.EnrollmentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.EnrollmentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    courseid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    enrolled: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.EnrollmentRequest}
 */
proto.ag.EnrollmentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.EnrollmentRequest;
  return proto.ag.EnrollmentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.EnrollmentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.EnrollmentRequest}
 */
proto.ag.EnrollmentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCourseid(value);
      break;
    case 3:
      var value = /** @type {!proto.ag.Enrollment.Status} */ (reader.readEnum());
      msg.setEnrolled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.EnrollmentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.EnrollmentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.EnrollmentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.EnrollmentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCourseid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getEnrolled();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional uint64 userID = 1;
 * @return {number}
 */
proto.ag.EnrollmentRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ag.EnrollmentRequest.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint64 courseID = 2;
 * @return {number}
 */
proto.ag.EnrollmentRequest.prototype.getCourseid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ag.EnrollmentRequest.prototype.setCourseid = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Enrollment.Status enrolled = 3;
 * @return {!proto.ag.Enrollment.Status}
 */
proto.ag.EnrollmentRequest.prototype.getEnrolled = function() {
  return /** @type {!proto.ag.Enrollment.Status} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.ag.Enrollment.Status} value */
proto.ag.EnrollmentRequest.prototype.setEnrolled = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.EnrollmentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ag.EnrollmentResponse.repeatedFields_, null);
};
goog.inherits(proto.ag.EnrollmentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.EnrollmentResponse.displayName = 'proto.ag.EnrollmentResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ag.EnrollmentResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.EnrollmentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.EnrollmentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.EnrollmentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.EnrollmentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    enrollmentsList: jspb.Message.toObjectList(msg.getEnrollmentsList(),
    proto.ag.Enrollment.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.EnrollmentResponse}
 */
proto.ag.EnrollmentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.EnrollmentResponse;
  return proto.ag.EnrollmentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.EnrollmentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.EnrollmentResponse}
 */
proto.ag.EnrollmentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ag.Enrollment;
      reader.readMessage(value,proto.ag.Enrollment.deserializeBinaryFromReader);
      msg.addEnrollments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.EnrollmentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.EnrollmentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.EnrollmentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.EnrollmentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnrollmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ag.Enrollment.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Enrollment enrollments = 1;
 * @return {!Array.<!proto.ag.Enrollment>}
 */
proto.ag.EnrollmentResponse.prototype.getEnrollmentsList = function() {
  return /** @type{!Array.<!proto.ag.Enrollment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ag.Enrollment, 1));
};


/** @param {!Array.<!proto.ag.Enrollment>} value */
proto.ag.EnrollmentResponse.prototype.setEnrollmentsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ag.Enrollment=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ag.Enrollment}
 */
proto.ag.EnrollmentResponse.prototype.addEnrollments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ag.Enrollment, opt_index);
};


proto.ag.EnrollmentResponse.prototype.clearEnrollmentsList = function() {
  this.setEnrollmentsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.RecordWithStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ag.RecordWithStatusRequest.repeatedFields_, null);
};
goog.inherits(proto.ag.RecordWithStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.RecordWithStatusRequest.displayName = 'proto.ag.RecordWithStatusRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ag.RecordWithStatusRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.RecordWithStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.RecordWithStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.RecordWithStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.RecordWithStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    statusesList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.RecordWithStatusRequest}
 */
proto.ag.RecordWithStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.RecordWithStatusRequest;
  return proto.ag.RecordWithStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.RecordWithStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.RecordWithStatusRequest}
 */
proto.ag.RecordWithStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Array.<!proto.ag.Enrollment.Status>} */ (reader.readPackedEnum());
      msg.setStatusesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.RecordWithStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.RecordWithStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.RecordWithStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.RecordWithStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getStatusesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      2,
      f
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.ag.RecordWithStatusRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ag.RecordWithStatusRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Enrollment.Status statuses = 2;
 * @return {!Array.<!proto.ag.Enrollment.Status>}
 */
proto.ag.RecordWithStatusRequest.prototype.getStatusesList = function() {
  return /** @type {!Array.<!proto.ag.Enrollment.Status>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<!proto.ag.Enrollment.Status>} value */
proto.ag.RecordWithStatusRequest.prototype.setStatusesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!proto.ag.Enrollment.Status} value
 * @param {number=} opt_index
 */
proto.ag.RecordWithStatusRequest.prototype.addStatuses = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.ag.RecordWithStatusRequest.prototype.clearStatusesList = function() {
  this.setStatusesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ag.StatusCode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ag.StatusCode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ag.StatusCode.displayName = 'proto.ag.StatusCode';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ag.StatusCode.prototype.toObject = function(opt_includeInstance) {
  return proto.ag.StatusCode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ag.StatusCode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.StatusCode.toObject = function(includeInstance, msg) {
  var f, obj = {
    statuscode: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ag.StatusCode}
 */
proto.ag.StatusCode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ag.StatusCode;
  return proto.ag.StatusCode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ag.StatusCode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ag.StatusCode}
 */
proto.ag.StatusCode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatuscode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ag.StatusCode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ag.StatusCode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ag.StatusCode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ag.StatusCode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatuscode();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 statuscode = 1;
 * @return {number}
 */
proto.ag.StatusCode.prototype.getStatuscode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ag.StatusCode.prototype.setStatuscode = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.ag);

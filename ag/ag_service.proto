syntax = "proto3";

package ag;

import "google/protobuf/timestamp.proto";

message User {
    uint64 ID = 1;
    bool isAdmin = 2;
    string name = 3;
    string studentID = 4;
    string email = 5;
    string avatarURL = 6;

    repeated RemoteIdentity remoteIdentities = 7;
    repeated Enrollment enrollments = 8;
}

message RemoteIdentity {
    uint64 ID = 1;
    //gorm:"unique_index:uid_provider_remote_id"
    string provider = 2;
    //gorm:"unique_index:uid_provider_remote_id"
    uint64 remoteID = 3;
    // TODO: should this be included here?
    string accessToken = 4;
    uint64 userID = 5;
}

message Users {
    repeated User Users = 1;
}

message Void {}

// RecordRequest is used to make request for a single record for various datatypes
// such as User, Course, Assignment etc.
message RecordRequest {
    uint64 ID = 1;
}

message Assignment {
    uint64 ID = 1;
    uint64 courseID = 2;
    string name = 3;
    string language = 4;
    google.protobuf.Timestamp deadline = 5;
    bool autoApprove = 6;
    uint32 order = 7;
    Submission submission = 8;
}

message Submission {
    uint64 ID = 1;
    uint64 assignmentID = 2;
    uint64 userID = 3;
    uint64 groupID = 4;
    uint32 score = 5;
    string scoreobjects = 6;
    string buildinfo = 7;
    string commithash = 8;
}

message Assignments {
    repeated Assignment assignments = 1;
}

message Group {
    uint64 ID = 1;
    // group name under the same course must be unique
    //gorm:"unique_index:idx_unique_group_name"
    string name = 2;
    uint32 status = 3;
    //gorm:"unique_index:idx_unique_group_name"
    uint64 CourseID = 4;
    repeated User Users = 5;
    repeated Enrollment Enrollments = 6;
}

message Course {
    uint64 ID = 1;
    string name = 2;
    string code = 3;
    uint32 year = 4;
    string tag = 5;
    string provider = 6;
    uint64 directoryID = 7;
    Enrollment.Status enrolled = 8;
    repeated Enrollment enrollments = 9;
    repeated Assignment assignments = 10;
    repeated Group groups = 11;
}

message Courses {
    repeated Course Courses = 1;
}

message Enrollment {
    uint64 ID = 1;
    //gorm:"unique_index:uid_user_course"
    uint64 courseID = 2;
    //gorm:"unique_index:uid_user_course"
    uint64 userID = 3;
    uint64 groupID = 4;
    User user = 5;
    Course course = 6;
    Group group = 7;
    enum Status {
        None     = 0;
        Pending  = 1;
        Rejected = 2;
        Student  = 3;
        Teacher  = 4;
    }
    Status status = 8;
}

// EnrollmentRequest is used to create and update enrollments.
// When used to create enrollment, the enrolled field is ignored.
// Only teachers and admins can enroll students.
message EnrollmentRequest {
    uint64 userID = 1;
    uint64 courseID = 2;
    Enrollment.Status enrolled = 3;
}

message EnrollmentResponse {
    repeated Enrollment enrollments = 1;
}

message RecordWithStatusRequest {
    uint64 ID = 1; // id can be User ID or Course ID depending //TODO NO! They should be different messages
    repeated Enrollment.Status statuses = 2;
}

message StatusCode {
    int32 statuscode = 1;
}

service AutograderService {
    rpc GetUser(RecordRequest) returns (User) {}
    rpc GetUsers(Void) returns (Users) {}
    rpc UpdateUser(User) returns (User) {}

    rpc CreateCourse(Course) returns (Course) {}
    rpc GetCourse(RecordRequest) returns (Course) {}
    rpc UpdateCourse(Course) returns (Course) {}
    rpc GetCourses(Void) returns (Courses) {}
    rpc GetCoursesWithEnrollment(RecordWithStatusRequest) returns (Courses) {}
    rpc GetAssignments(RecordRequest) returns (Assignments) {}
    rpc GetEnrollmentsByCourse(RecordWithStatusRequest) returns (EnrollmentResponse) {}

    rpc CreateEnrollment(EnrollmentRequest) returns (StatusCode) {}
    rpc UpdateEnrollment(EnrollmentRequest) returns (StatusCode) {}
}
